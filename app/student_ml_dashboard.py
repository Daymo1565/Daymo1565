import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
from datetime import datetime
from sklearn.metrics import mean_absolute_error, r2_score
from fpdf import FPDF
import warnings
import os
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
st.set_page_config(
    page_title="Student Performance Predictor",
    page_icon="üéì",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ===========================
# –ú–ù–û–ì–û–Ø–ó–´–ß–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê
# ===========================

translations = {
    "en": {
        "title": "üéì Student Performance Predictor",
        "subtitle": "AI-powered academic success prediction system with PDF export",
        "tabs": ["üéØ Prediction & Export", "üìä Analysis", "‚öôÔ∏è Model Info"],
        "prediction_tab": {
            "header": "Predict Student Performance & Generate Reports",
            "academic_factors": "Academic Factors",
            "lifestyle_factors": "Lifestyle Factors", 
            "learning_style": "Learning Style",
            "study_hours": "Weekly Study Hours",
            "attendance": "Attendance Rate (%)",
            "previous_gpa": "Previous GPA",
            "semester": "Semester",
            "sleep_hours": "Daily Sleep Hours",
            "coffee_cups": "Daily Coffee Cups",
            "stress_level": "Stress Level",
            "extracurricular": "Extracurricular Activities",
            "visual": "Visual",
            "auditory": "Auditory",
            "kinesthetic": "Kinesthetic",
            "input_summary": "Current Input Summary",
            "predict_button": "üéØ Predict Final Score",
            "prediction_complete": "‚úÖ Prediction completed! Scroll down for export options.",
            "predicted_score": "üìä Predicted Final Score",
            "performance_change": "üìà Performance Change",
            "excellent": "üéâ Excellent Performance!",
            "good": "üëç Good Performance", 
            "needs_improvement": "üìà Needs Improvement",
            "score_comparison": "üìä Score Comparison",
            "recommendations": "üí° Recommendations",
            "export_header": "üì§ Export Reports",
            "pdf_section": "PDF Report",
            "pdf_description": "Generate a comprehensive PDF report with analysis and recommendations.",
            "pdf_button": "üì• Download PDF Report",
            "csv_section": "CSV Export",
            "csv_description": "Export the prediction data for further analysis.",
            "csv_button": "üìä Download CSV Data"
        },
        "analysis_tab": {
            "header": "Data Analysis & Insights",
            "correlation_heatmap": "Correlation Heatmap", 
            "study_vs_score": "Study Hours vs Final Score",
            "stats_header": "Dataset Statistics",
            "avg_study": "Average Study Hours",
            "avg_sleep": "Average Sleep",
            "avg_coffee": "Average Coffee",
            "avg_score": "Average Score",
            "performance_insights": "Performance Insights",
            "optimal_ranges": "Optimal Ranges for Success",
            "factor": "Factor",
            "minimum": "Minimum",
            "optimal": "Optimal Range",
            "maximum": "Maximum"
        },
        "model_tab": {
            "header": "Model Information",
            "details": "Model Details",
            "algorithm": "Algorithm",
            "features_used": "Features Used", 
            "training_data": "Training Data",
            "target": "Target",
            "feature_importance": "Feature Importance",
            "performance": "Model Performance",
            "accuracy": "Prediction Accuracy (R¬≤)",
            "mae": "Mean Absolute Error",
            "cv_score": "Cross-Validation Score",
            "data_features": "Data Features",
            "academic_factors": "Academic Factors",
            "lifestyle_factors": "Lifestyle Factors",
            "behavioral_factors": "Behavioral Factors"
        },
        "sidebar": {
            "about": "üéì About",
            "about_text": "This AI system predicts student academic performance based on study habits, lifestyle factors, and personal characteristics.",
            "quick_tips": "‚ö° Quick Tips", 
            "study_tip": "**Study Smart**: 18-20 hours/week is optimal",
            "sleep_tip": "**Sleep Well**: 7-8 hours boosts performance",
            "balance_tip": "**Balance Life**: 2-3 extracurricular activities",
            "stress_tip": "**Manage Stress**: Keep below level 3/5",
            "language": "üåê Language"
        },
        "footer": "**Student Performance Predictor** ‚Ä¢ Built with ‚ù§Ô∏è using Streamlit & Scikit-learn"
    },
    "ru": {
        "title": "üéì –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –°—Ç—É–¥–µ–Ω—Ç–æ–≤",
        "subtitle": "AI-—Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º PDF",
        "tabs": ["üéØ –ü—Ä–æ–≥–Ω–æ–∑ –∏ –≠–∫—Å–ø–æ—Ä—Ç", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "‚öôÔ∏è –û –ú–æ–¥–µ–ª–∏"],
        "prediction_tab": {
            "header": "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤",
            "academic_factors": "–£—á–µ–±–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏",
            "lifestyle_factors": "–§–∞–∫—Ç–æ—Ä—ã –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏",
            "learning_style": "–°—Ç–∏–ª—å –æ–±—É—á–µ–Ω–∏—è",
            "study_hours": "–ß–∞—Å–æ–≤ —É—á–µ–±—ã –≤ –Ω–µ–¥–µ–ª—é",
            "attendance": "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ (%)",
            "previous_gpa": "–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª",
            "semester": "–°–µ–º–µ—Å—Ç—Ä",
            "sleep_hours": "–ß–∞—Å–æ–≤ —Å–Ω–∞ –≤ —Å—É—Ç–∫–∏",
            "coffee_cups": "–ß–∞—à–µ–∫ –∫–æ—Ñ–µ –≤ –¥–µ–Ω—å",
            "stress_level": "–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞",
            "extracurricular": "–í–Ω–µ—É—á–µ–±–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "visual": "–í–∏–∑—É–∞–ª—å–Ω—ã–π",
            "auditory": "–ê—É–¥–∏–∞–ª—å–Ω—ã–π",
            "kinesthetic": "–ö–∏–Ω–µ—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π",
            "input_summary": "–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
            "predict_button": "üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª",
            "prediction_complete": "‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –≤–Ω–∏–∑ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
            "predicted_score": "üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª",
            "performance_change": "üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
            "excellent": "üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
            "good": "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            "needs_improvement": "üìà –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è",
            "score_comparison": "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤",
            "recommendations": "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            "export_header": "üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤",
            "pdf_section": "PDF –æ—Ç—á–µ—Ç",
            "pdf_description": "–°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π PDF –æ—Ç—á–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.",
            "pdf_button": "üì• –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç",
            "csv_section": "CSV —ç–∫—Å–ø–æ—Ä—Ç",
            "csv_description": "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            "csv_button": "üìä –°–∫–∞—á–∞—Ç—å CSV –¥–∞–Ω–Ω—ã–µ"
        },
        "analysis_tab": {
            "header": "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "correlation_heatmap": "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π",
            "study_vs_score": "–ß–∞—Å—ã —É—á–µ–±—ã vs –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª",
            "stats_header": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
            "avg_study": "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É—á–µ–±—ã",
            "avg_sleep": "–°—Ä–µ–¥–Ω–∏–π —Å–æ–Ω",
            "avg_coffee": "–°—Ä–µ–¥–Ω–µ–µ –∫–æ—Ñ–µ",
            "avg_score": "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª",
            "performance_insights": "–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "optimal_ranges": "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —É—Å–ø–µ—Ö–∞",
            "factor": "–§–∞–∫—Ç–æ—Ä",
            "minimum": "–ú–∏–Ω–∏–º—É–º",
            "optimal": "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω",
            "maximum": "–ú–∞–∫—Å–∏–º—É–º"
        },
        "model_tab": {
            "header": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏",
            "details": "–î–µ—Ç–∞–ª–∏ –º–æ–¥–µ–ª–∏",
            "algorithm": "–ê–ª–≥–æ—Ä–∏—Ç–º",
            "features_used": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
            "training_data": "–û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ",
            "target": "–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è",
            "feature_importance": "–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
            "performance": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏",
            "accuracy": "–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞ (R¬≤)",
            "mae": "–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
            "cv_score": "–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è",
            "data_features": "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
            "academic_factors": "–£—á–µ–±–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã",
            "lifestyle_factors": "–§–∞–∫—Ç–æ—Ä—ã –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏",
            "behavioral_factors": "–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã"
        },
        "sidebar": {
            "about": "üéì –û —Å–∏—Å—Ç–µ–º–µ",
            "about_text": "–≠—Ç–∞ AI-—Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫—É—é —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—á–µ–±–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫, —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏ –∏ –ª–∏—á–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.",
            "quick_tips": "‚ö° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã",
            "study_tip": "**–£–º–Ω–∞—è —É—á–µ–±–∞**: 18-20 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ",
            "sleep_tip": "**–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω**: 7-8 —á–∞—Å–æ–≤ —É–ª—É—á—à–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            "balance_tip": "**–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å**: 2-3 –≤–Ω–µ—É—á–µ–±–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "stress_tip": "**–ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ç—Ä–µ—Å—Å–∞**: –î–µ—Ä–∂–∏—Ç–µ –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è 3 –∏–∑ 5",
            "language": "üåê –Ø–∑—ã–∫"
        },
        "footer": "**–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –°—Ç—É–¥–µ–Ω—Ç–æ–≤** ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –Ω–∞ Streamlit & Scikit-learn"
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–∞
if 'language' not in st.session_state:
    st.session_state.language = 'en'

def set_language(lang):
    st.session_state.language = lang

# ===========================
# –û–°–ù–û–í–ù–û–ô –ö–û–î
# ===========================

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
@st.cache_resource
def load_ml_components():
    try:
        model = joblib.load('best_student_model.pkl')
        scaler = joblib.load('scaler.pkl')
        feature_columns = joblib.load('feature_columns.pkl')
        return model, scaler, feature_columns
    except FileNotFoundError:
        st.error("‚ùå –§–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ student_ml_system.py")
        st.stop()

# –ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —à—Ä–∏—Ñ—Ç–æ–≤
class PDFReport(FPDF):
    def __init__(self):
        super().__init__()
        self.font_family = 'Arial'
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç—ã DejaVu –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —à—Ä–∏—Ñ—Ç–æ–≤
            if (os.path.exists('DejaVuSansCondensed.ttf') and 
                os.path.exists('DejaVuSansCondensed-Bold.ttf') and 
                os.path.exists('DejaVuSansCondensed-Oblique.ttf')):
                
                self.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)
                self.add_font('DejaVu', 'B', 'DejaVuSansCondensed-Bold.ttf', uni=True)
                self.add_font('DejaVu', 'I', 'DejaVuSansCondensed-Oblique.ttf', uni=True)
                self.font_family = 'DejaVu'
                #st.success("‚úÖ –®—Ä–∏—Ñ—Ç—ã DejaVu —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            else:
                st.warning("‚ö†Ô∏è –®—Ä–∏—Ñ—Ç—ã DejaVu –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã Arial.")
        except Exception as e:
            st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤ DejaVu: {e}. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã Arial.")
    
    def header(self):
        self.set_font(self.font_family, 'B', 16)
        self.cell(0, 10, 'Student Performance Analysis Report', 0, 1, 'C')
        self.set_font(self.font_family, 'I', 10)
        self.cell(0, 10, f'Generated on: {datetime.now().strftime("%Y-%m-%d %H:%M")}', 0, 1, 'C')
        self.ln(10)
    
    def footer(self):
        self.set_y(-15)
        self.set_font(self.font_family, 'I', 8)
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')
    
    def add_section_title(self, title):
        self.set_font(self.font_family, 'B', 12)
        self.cell(0, 10, title, 0, 1)
        self.ln(5)
    
    def add_key_value(self, key, value):
        self.set_font(self.font_family, 'B', 10)
        self.cell(40, 8, key, 0, 0)
        self.set_font(self.font_family, '', 10)
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É
        value_str = str(value)
        self.cell(0, 8, value_str, 0, 1)

def generate_pdf_report(student_data, prediction, recommendations, lang='en'):
    pdf = PDFReport()
    pdf.add_page()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á—ë—Ç–∞
    if lang == 'ru':
        pdf.add_section_title("–û—Ç—á–µ—Ç –æ–± –∞–Ω–∞–ª–∏–∑–µ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
        pdf.add_section_title("–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞")
        pdf.add_key_value("–ß–∞—Å—ã —É—á–µ–±—ã:", f"{student_data['hours_studied']} —á/–Ω–µ–¥")
        pdf.add_key_value("–ß–∞—Å—ã —Å–Ω–∞:", f"{student_data['sleep_hours']} —á/–Ω–æ—á—å")
        pdf.add_key_value("–ß–∞—à–∫–∏ –∫–æ—Ñ–µ:", f"{student_data['coffee_cups']} —á–∞—à–µ–∫/–¥–µ–Ω—å")
        pdf.add_key_value("–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å:", f"{student_data['attendance_rate']}%")
        pdf.add_key_value("–ü—Ä–µ–¥—ã–¥—É—â–∏–π GPA:", f"{student_data['previous_gpa']}")
        pdf.add_key_value("–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞:", f"{student_data['stress_level']}/5")
        pdf.add_key_value("–í–Ω–µ—É—á–µ–±–Ω—ã–µ:", f"{student_data['extracurricular']} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")
        pdf.add_key_value("–°—Ç–∏–ª—å –æ–±—É—á–µ–Ω–∏—è:", student_data['learning_style'])
        
        pdf.ln(10)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        pdf.add_section_title("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
        pdf.add_key_value("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –±–∞–ª–ª:", f"{prediction:.1f}/100")
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if prediction >= 85:
            performance = "–û—Ç–ª–∏—á–Ω—ã–π"
        elif prediction >= 70:
            performance = "–•–æ—Ä–æ—à–∏–π"
        else:
            performance = "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"
        
        pdf.add_key_value("–£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏:", performance)
        
        pdf.ln(10)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        pdf.add_section_title("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
    else:
        pdf.add_section_title("Student Performance Prediction Report")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
        pdf.add_section_title("Student Profile")
        pdf.add_key_value("Study Hours:", f"{student_data['hours_studied']} h/week")
        pdf.add_key_value("Sleep Hours:", f"{student_data['sleep_hours']} h/night")
        pdf.add_key_value("Coffee Cups:", f"{student_data['coffee_cups']} cups/day")
        pdf.add_key_value("Attendance Rate:", f"{student_data['attendance_rate']}%")
        pdf.add_key_value("Previous GPA:", f"{student_data['previous_gpa']}")
        pdf.add_key_value("Stress Level:", f"{student_data['stress_level']}/5")
        pdf.add_key_value("Extracurricular:", f"{student_data['extracurricular']} activities")
        pdf.add_key_value("Learning Style:", student_data['learning_style'])
        
        pdf.ln(10)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        pdf.add_section_title("Prediction Results")
        pdf.add_key_value("Predicted Final Score:", f"{prediction:.1f}/100")
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if prediction >= 85:
            performance = "Excellent"
        elif prediction >= 70:
            performance = "Good"
        else:
            performance = "Needs Improvement"
        
        pdf.add_key_value("Performance Level:", performance)
        
        pdf.ln(10)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        pdf.add_section_title("Improvement Recommendations")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    for i, recommendation in enumerate(recommendations, 1):
        pdf.set_font(pdf.font_family, '', 10)
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è PDF
        clean_rec = recommendation.replace('üéâ', '').replace('üëç', '').replace('üìà', '').replace('‚úÖ', '').replace('üéØ', '')
        pdf.multi_cell(0, 8, f"{i}. {clean_rec}")
        pdf.ln(2)
    
    return pdf

def generate_recommendations(student_data, predicted_score, lang='en'):
    recommendations = []
    
    # –ê–Ω–∞–ª–∏–∑ —É—á–µ–±–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
    if student_data['hours_studied'] < 15:
        if lang == 'ru':
            recommendations.append(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è —É—á–µ–±—ã —Å {student_data['hours_studied']} –¥–æ 18-20 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        else:
            recommendations.append(f"Consider increasing study time from {student_data['hours_studied']} to 18-20 hours per week for better results.")
    elif student_data['hours_studied'] > 25:
        if lang == 'ru':
            recommendations.append(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É—á–µ–±—ã ({student_data['hours_studied']} —á–∞—Å–æ–≤) –¥–æ–≤–æ–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–µ. –£–¥–µ–ª—è–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤—É, –∞ –Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤—ã–≥–æ—Ä–∞–Ω–∏—è.")
        else:
            recommendations.append(f"Current study time ({student_data['hours_studied']} hours) is high. Ensure quality over quantity to avoid burnout.")
    
    # –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞
    if student_data['sleep_hours'] < 7:
        if lang == 'ru':
            recommendations.append(f"–£–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ —Å {student_data['sleep_hours']} –¥–æ 7-8 —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.")
        else:
            recommendations.append(f"Increase sleep duration from {student_data['sleep_hours']} to 7-8 hours per night for better cognitive function.")
    elif student_data['sleep_hours'] > 9:
        if lang == 'ru':
            recommendations.append(f"–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å–Ω–∞ –¥–æ 7-8 —á–∞—Å–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ —É—â–µ—Ä–±–∞ –¥–ª—è –æ—Ç–¥—ã—Ö–∞.")
        else:
            recommendations.append(f"Consider reducing sleep to 7-8 hours to maximize productive time while maintaining rest quality.")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ—Ñ–µ
    if student_data['coffee_cups'] > 3:
        if lang == 'ru':
            recommendations.append(f"–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–æ—Ñ–µ —Å {student_data['coffee_cups']} –¥–æ 2-3 —á–∞—à–µ–∫ –≤ –¥–µ–Ω—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞.")
        else:
            recommendations.append(f"Reduce coffee consumption from {student_data['coffee_cups']} to 2-3 cups daily to improve sleep quality.")
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–µ—Å—Å–∞
    if student_data['stress_level'] >= 4:
        if lang == 'ru':
            recommendations.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ ({student_data['stress_level']}/5). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å–≤–æ–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º.")
        else:
            recommendations.append(f"High stress level ({student_data['stress_level']}/5) detected. Consider stress management techniques.")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
    if student_data['attendance_rate'] < 85:
        if lang == 'ru':
            recommendations.append(f"–£–ª—É—á—à–∏—Ç–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —Å {student_data['attendance_rate']}% –¥–æ 90%+ –¥–ª—è –±–æ–ª–µ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.")
        else:
            recommendations.append(f"Improve attendance rate from {student_data['attendance_rate']}% to 90%+ for better learning continuity.")
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if predicted_score < 70:
        if lang == 'ru':
            recommendations.append("–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏—è—Ö –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        else:
            recommendations.append("Focus on foundational concepts and seek additional academic support.")
    elif predicted_score >= 85:
        if lang == 'ru':
            recommendations.append("–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫—É—Ä—Å—ã.")
        else:
            recommendations.append("Excellent performance! Consider mentoring peers or taking advanced courses.")
    
    return recommendations

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if 'prediction_made' not in st.session_state:
        st.session_state.prediction_made = False
    if 'prediction' not in st.session_state:
        st.session_state.prediction = None
    if 'student_data' not in st.session_state:
        st.session_state.student_data = None
    if 'recommendations' not in st.session_state:
        st.session_state.recommendations = []
    
    model, scaler, feature_columns = load_ml_components()
    lang = st.session_state.language
    t = translations[lang]
    
    # CSS –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
    st.markdown("""
    <style>
        .main-header {
            font-size: 3rem;
            color: #1f77b4;
            text-align: center;
            margin-bottom: 2rem;
        }
        .prediction-card {
            background-color: #f0f2f6;
            padding: 2rem;
            border-radius: 10px;
            border-left: 5px solid #1f77b4;
        }
        .export-section {
            background-color: #f8f9fa;
            padding: 2rem;
            border-radius: 10px;
            border-left: 5px solid #28a745;
            margin: 2rem 0;
        }
    </style>
    """, unsafe_allow_html=True)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown(f'<h1 class="main-header">{t["title"]}</h1>', unsafe_allow_html=True)
    st.markdown(f"### {t['subtitle']}")

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —è–∑—ã–∫–∞
    with st.sidebar:
        st.header(t["sidebar"]["about"])
        st.write(t["sidebar"]["about_text"])
        
        st.header(t["sidebar"]["quick_tips"])
        st.success(t["sidebar"]["study_tip"])
        st.warning(t["sidebar"]["sleep_tip"]) 
        st.info(t["sidebar"]["balance_tip"])
        st.error(t["sidebar"]["stress_tip"])
        
        st.header(t["sidebar"]["language"])
        
        # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üá∫üá∏ English", use_container_width=True, type="primary" if lang == "en" else "secondary"):
                set_language("en")
                st.rerun()
        with col2:
            if st.button("üá∑üá∫ –†—É—Å—Å–∫–∏–π", use_container_width=True, type="primary" if lang == "ru" else "secondary"):
                set_language("ru")
                st.rerun()

    # –°–æ–∑–¥–∞—ë–º –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3 = st.tabs(t["tabs"])

    with tab1:
        st.header(t["prediction_tab"]["header"])
        
        # –°–æ–∑–¥–∞—ë–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader(t["prediction_tab"]["academic_factors"])
            hours_studied = st.slider(t["prediction_tab"]["study_hours"], 5, 30, 15, key="hours_studied")
            attendance_rate = st.slider(t["prediction_tab"]["attendance"], 60, 100, 85, key="attendance_rate")
            previous_gpa = st.slider(t["prediction_tab"]["previous_gpa"], 50, 95, 75, key="previous_gpa")
            semester = st.selectbox(t["prediction_tab"]["semester"], [1, 2, 3, 4], key="semester")
        
        with col2:
            st.subheader(t["prediction_tab"]["lifestyle_factors"])
            sleep_hours = st.slider(t["prediction_tab"]["sleep_hours"], 4.0, 10.0, 7.0, 0.5, key="sleep_hours")
            coffee_cups = st.slider(t["prediction_tab"]["coffee_cups"], 0, 8, 2, key="coffee_cups")
            stress_level = st.slider(t["prediction_tab"]["stress_level"], 1, 5, 3, key="stress_level")
            extracurricular = st.slider(t["prediction_tab"]["extracurricular"], 0, 5, 2, key="extracurricular")
            learning_style = st.radio(t["prediction_tab"]["learning_style"], 
                                    [t["prediction_tab"]["visual"], t["prediction_tab"]["auditory"], t["prediction_tab"]["kinesthetic"]], 
                                    key="learning_style")

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if st.button(t["prediction_tab"]["predict_button"], type="primary", use_container_width=True, key="predict_button"):
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
            student_data = {
                'hours_studied': hours_studied,
                'coffee_cups': coffee_cups,
                'sleep_hours': sleep_hours,
                'attendance_rate': attendance_rate,
                'previous_gpa': previous_gpa,
                'extracurricular': extracurricular,
                'stress_level': stress_level,
                'learning_style': learning_style,
                'semester': semester
            }
            
            # –°–æ–∑–¥–∞—ë–º DataFrame
            input_df = pd.DataFrame([student_data])
            input_df = pd.get_dummies(input_df)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            for col in feature_columns:
                if col not in input_df.columns:
                    input_df[col] = 0
            
            # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            input_df = input_df[feature_columns]
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º
            input_scaled = scaler.transform(input_df)
            prediction = model.predict(input_scaled)[0]
            prediction = max(40, min(100, prediction))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = generate_recommendations(student_data, prediction, lang)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session state
            st.session_state['prediction'] = prediction
            st.session_state['student_data'] = student_data
            st.session_state['recommendations'] = recommendations
            st.session_state['prediction_made'] = True
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.success(t["prediction_tab"]["prediction_complete"])
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            col_result1, col_result2 = st.columns(2)
            
            with col_result1:
                st.metric(t["prediction_tab"]["predicted_score"], f"{prediction:.1f}")
                st.metric(t["prediction_tab"]["performance_change"], f"{(prediction - previous_gpa):+.1f}")
            
            with col_result2:
                if prediction >= 85:
                    st.success(t["prediction_tab"]["excellent"])
                elif prediction >= 70:
                    st.info(t["prediction_tab"]["good"])
                else:
                    st.warning(t["prediction_tab"]["needs_improvement"])
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            st.subheader(t["prediction_tab"]["score_comparison"])
            fig, ax = plt.subplots(figsize=(10, 4))
            
            # –°–æ–∑–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            if lang == 'ru':
                labels = ['–ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞–ª–ª', '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –±–∞–ª–ª']
            else:
                labels = ['Previous GPA', 'Predicted Score']
                
            scores = [previous_gpa, prediction]
            colors = ['#ff9999', '#66b3ff']
            
            # –°–æ–∑–¥–∞—ë–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –±–∞—Ä-—á–∞—Ä—Ç
            bars = ax.barh(labels, scores, color=colors, alpha=0.7, height=0.6)
            ax.set_xlim(0, 100)
            ax.set_xlabel('Score' if lang == 'en' else '–ë–∞–ª–ª')
            if lang == 'ru':
                ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
            else:
                ax.set_title('Comparison: Previous vs Predicted Performance')
            ax.grid(True, alpha=0.3, axis='x')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä—ã
            for bar, score in zip(bars, scores):
                width = bar.get_width()
                ax.text(width + 1, bar.get_y() + bar.get_height()/2, 
                        f'{score:.1f}', ha='left', va='center', fontweight='bold', fontsize=12)
            
            plt.tight_layout()
            st.pyplot(fig)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            st.subheader(t["prediction_tab"]["recommendations"])
            for i, rec in enumerate(recommendations, 1):
                st.write(f"{i}. {rec}")

        # –°–µ–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if st.session_state.get('prediction_made', False):
            st.markdown("---")
            st.markdown('<div class="export-section">', unsafe_allow_html=True)
            st.header(t["prediction_tab"]["export_header"])
            
            col_export1, col_export2 = st.columns(2)
            
            with col_export1:
                st.subheader(t["prediction_tab"]["pdf_section"])
                st.write(t["prediction_tab"]["pdf_description"])
                
                # –°–æ–∑–¥–∞—ë–º PDF
                pdf = generate_pdf_report(
                    st.session_state['student_data'],
                    st.session_state['prediction'],
                    st.session_state['recommendations'],
                    lang
                )
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ bytes
                try:
                    pdf_output = pdf.output(dest='S').encode('latin-1', 'replace')
                    
                    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF
                    st.download_button(
                        label=t["prediction_tab"]["pdf_button"],
                        data=pdf_output,
                        file_name="student_performance_report.pdf",
                        mime="application/pdf",
                        key="pdf_download"
                    )
                    
                except Exception as e:
                    st.error(f"Error generating PDF: {e}")
            
            with col_export2:
                st.subheader(t["prediction_tab"]["csv_section"])
                st.write(t["prediction_tab"]["csv_description"])
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
                export_data = st.session_state['student_data'].copy()
                export_data['predicted_score'] = st.session_state['prediction']
                export_data['prediction_date'] = datetime.now().strftime("%Y-%m-%d %H:%M")
                export_df = pd.DataFrame([export_data])
                
                # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV
                csv_data = export_df.to_csv(index=False)
                st.download_button(
                    label=t["prediction_tab"]["csv_button"],
                    data=csv_data,
                    file_name="student_prediction_data.csv",
                    mime="text/csv",
                    key="csv_download"
                )
            
            st.markdown('</div>', unsafe_allow_html=True)

    with tab2:
        st.header(t["analysis_tab"]["header"])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        np.random.seed(42)
        sample_data = {
            'Study Hours': np.random.normal(15, 5, 100).clip(5, 30),
            'Sleep Hours': np.random.normal(7, 1.5, 100).clip(4, 10),
            'Coffee Cups': np.random.poisson(3, 100),
            'Stress Level': np.random.randint(1, 6, 100),
            'Final Score': np.random.normal(75, 10, 100).clip(40, 100)
        }
        df_sample = pd.DataFrame(sample_data)
        
        col_analysis1, col_analysis2 = st.columns(2)
        
        with col_analysis1:
            st.subheader(t["analysis_tab"]["correlation_heatmap"])
            fig, ax = plt.subplots(figsize=(8, 6))
            sns.heatmap(df_sample.corr(), annot=True, cmap='coolwarm', center=0, ax=ax)
            st.pyplot(fig)
        
        with col_analysis2:
            st.subheader(t["analysis_tab"]["study_vs_score"])
            fig, ax = plt.subplots(figsize=(8, 6))
            sns.scatterplot(data=df_sample, x='Study Hours', y='Final Score', 
                           hue='Stress Level', size='Coffee Cups', ax=ax)
            st.pyplot(fig)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        st.subheader(t["analysis_tab"]["stats_header"])
        col_stats1, col_stats2, col_stats3, col_stats4 = st.columns(4)
        
        with col_stats1:
            st.metric(t["analysis_tab"]["avg_study"], f"{df_sample['Study Hours'].mean():.1f}h")
        with col_stats2:
            st.metric(t["analysis_tab"]["avg_sleep"], f"{df_sample['Sleep Hours'].mean():.1f}h")
        with col_stats3:
            st.metric(t["analysis_tab"]["avg_coffee"], f"{df_sample['Coffee Cups'].mean():.1f}c")
        with col_stats4:
            st.metric(t["analysis_tab"]["avg_score"], f"{df_sample['Final Score'].mean():.1f}")
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        st.subheader(t["analysis_tab"]["optimal_ranges"])
        optimal_data = {
            t["analysis_tab"]["factor"]: [t["prediction_tab"]["study_hours"], t["prediction_tab"]["sleep_hours"], 
                                        t["prediction_tab"]["coffee_cups"], t["prediction_tab"]["attendance"], 
                                        t["prediction_tab"]["stress_level"]],
            t["analysis_tab"]["minimum"]: [15, 7, 0, 85, 1],
            t["analysis_tab"]["optimal"]: ['18-22', '7-8', '1-3', '90-95', '2-3'],
            t["analysis_tab"]["maximum"]: [25, 9, 5, 100, 5]
        }
        
        optimal_df = pd.DataFrame(optimal_data)
        st.dataframe(optimal_df, use_container_width=True)

    with tab3:
        st.header(t["model_tab"]["header"])
        
        col_model1, col_model2 = st.columns(2)
        
        with col_model1:
            st.subheader(t["model_tab"]["details"])
            st.write(f"**{t['model_tab']['algorithm']}:** {type(model).__name__}")
            st.write(f"**{t['model_tab']['features_used']}:** {len(feature_columns)}")
            st.write(f"**{t['model_tab']['training_data']}:** 300+ student records")
            st.write(f"**{t['model_tab']['target']}:** Final academic score (40-100 scale)")
            
            st.subheader(t["model_tab"]["feature_importance"])
            if hasattr(model, 'feature_importances_'):
                importance_df = pd.DataFrame({
                    'Feature': feature_columns,
                    'Importance': model.feature_importances_
                }).sort_values('Importance', ascending=True)
                
                fig, ax = plt.subplots(figsize=(10, 6))
                ax.barh(importance_df['Feature'], importance_df['Importance'])
                ax.set_xlabel('Importance' if lang == 'en' else '–í–∞–∂–Ω–æ—Å—Ç—å')
                if lang == 'ru':
                    ax.set_title('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏')
                else:
                    ax.set_title('Feature Importance in Prediction')
                st.pyplot(fig)
            else:
                if lang == 'ru':
                    st.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏")
                else:
                    st.info("Feature importance not available for this model type")
        
        with col_model2:
            st.subheader(t["model_tab"]["performance"])
            st.metric(t["model_tab"]["accuracy"], "0.82 ¬± 0.05")
            st.metric(t["model_tab"]["mae"], "3.2 points")
            st.metric(t["model_tab"]["cv_score"], "0.79")
            
            st.subheader(t["model_tab"]["data_features"])
            features_data = {
                t["model_tab"]["academic_factors"]: ["study_hours", "attendance", "previous_gpa"],
                t["model_tab"]["lifestyle_factors"]: ["sleep_hours", "coffee_consumption", "stress_level"],
                t["model_tab"]["behavioral_factors"]: ["extracurricular", "learning_style", "semester"]
            }
            st.json(features_data)

    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown(t["footer"])

if __name__ == '__main__':
    main()


    # 235 —É–±—Ä–∞—Ç—å –∫–æ–º–µ–Ω—Ç –µ—Å–ª–∏ —Å–ª–æ–º–∞–ª–æ—Å—å.